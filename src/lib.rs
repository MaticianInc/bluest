#![warn(missing_docs)]

//! Bluest is a cross-platform Bluetooth Low Energy (BLE) crate. It currently supports Windows (version 10 and later)
//! and MacOS/iOS. Linux and Android support are planned.
//!
//! The crate currently supports the GAP Central and GATT Client roles. Peripheral and Server roles are not supported.
//!
//! ## Usage
//!
//! ```rust,no_run
//!# #[tokio::main]
//!# async fn main() -> Result<(), Box<dyn Error>> {
//!let adapter = Adapter::default().await.unwrap();
//!adapter.wait_available().await?;
//!
//!println!("starting scan");
//!let mut scan = adapter.scan(&[]).await?;
//!println!("scan started");
//!while let Some(discovered_device) = scan.next().await {
//!    if discovered_device.adv_data.local_name.is_some() {
//!        println!(
//!            "{} ({}dBm): {:?}",
//!            discovered_device.adv_data.local_name.as_ref().unwrap(),
//!            discovered_device.rssi.unwrap(),
//!            discovered_device.adv_data.services
//!        );
//!    }
//!}
//!#
//!#    Ok(())
//!# }
//! ```

pub mod btuuid;
pub mod error;

#[cfg(target_os = "linux")]
mod bluer;
#[cfg(any(target_os = "macos", target_os = "ios"))]
mod corebluetooth;
#[cfg(target_os = "windows")]
mod windows;

use std::collections::HashMap;

#[cfg(target_os = "linux")]
pub use ::bluer::Uuid;
pub use btuuid::BluetoothUuidExt;
use enumflags2::bitflags;
pub use error::Error;
pub use smallvec::SmallVec;
pub use sys::adapter::Adapter;
pub use sys::characteristic::Characteristic;
pub use sys::descriptor::Descriptor;
pub use sys::device::{Device, DeviceId};
pub use sys::service::Service;
#[cfg(not(target_os = "linux"))]
pub use uuid::Uuid;

#[cfg(target_os = "linux")]
use crate::bluer as sys;
#[cfg(any(target_os = "macos", target_os = "ios"))]
use crate::corebluetooth as sys;
#[cfg(target_os = "windows")]
use crate::windows as sys;

/// Convenience alias for a result with [`Error`]
pub type Result<T, E = Error> = core::result::Result<T, E>;

/// Events generated by [`Adapter`]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum AdapterEvent {
    /// The adapter has become available (powered on and ready to use)
    Available,
    /// The adapter has become unavailable (powered off or otherwise disabled)
    Unavailable,
}

/// Represents a device discovered during a scan operation
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AdvertisingDevice {
    /// The source of the advertisement
    pub device: crate::Device,
    /// The advertisment data
    pub adv_data: AdvertisementData,
    /// The signal strength in dBm of the received advertisement packet
    pub rssi: Option<i16>,
}

/// Data included in a Bluetooth advertisement or scan reponse.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AdvertisementData {
    /// The (possibly shortened) local name of the device (CSS §A.1.2)
    pub local_name: Option<String>,
    /// Manufacturer specific data (CSS §A.1.4)
    pub manufacturer_data: Option<ManufacturerData>,
    /// Advertised GATT service UUIDs (CSS §A.1.1)
    pub services: SmallVec<[Uuid; 1]>,
    /// Solicited GATT service UUIDs (CSS §A.1.10)
    pub solicited_services: SmallVec<[Uuid; 1]>,
    /// Service associated data (CSS §A.1.11)
    pub service_data: HashMap<Uuid, SmallVec<[u8; 16]>>,
    /// Transmitted power level (CSS §A.1.5)
    pub tx_power_level: Option<i16>,
    /// Set to true for connectable advertising packets
    pub is_connectable: bool,
}

/// Manufacturer specific data included in Bluetooth advertisements. See the Bluetooth Core Specification Supplement
/// §A.1.4 for details.
#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct ManufacturerData {
    /// Company identifier (defined [here](https://www.bluetooth.com/specifications/assigned-numbers/company-identifiers/))
    pub company_id: u16,
    /// Manufacturer specific data
    pub data: SmallVec<[u8; 16]>,
}

/// GATT characteristic properties as defined in the Bluetooth Core Specification, Vol 3, Part G, §3.3.1.1.
/// Extended properties are also included in the upper bits as defined in §3.3.3.1.
#[allow(missing_docs)]
#[bitflags]
#[repr(u32)]
#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum CharacteristicProperty {
    Broadcast = 0x01,
    Read = 0x02,
    WriteWithoutResponse = 0x04,
    Write = 0x08,
    Notify = 0x10,
    Indicate = 0x20,
    AuthenticatedSignedWrites = 0x40,
    ExtendedProperties = 0x80,
    ReliableWrite = 0x0100,
    WritableAuxiliaries = 0x0200,
}
